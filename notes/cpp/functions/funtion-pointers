Like any other pointer, a function pointer points to a particular type. A
functionâ€™s type is determined by its return type and the types of its parameters. The
functionâ€™s name is not part of its type.

// pf points to a function returning bool that takes two const string references
bool (*pf)(const string &, const string &);  // uninitialized

When we use the name of a function as a value, the function is automatically
converted to a pointer.

pf = lengthCompare;  // pf now points to the function named lengthCompare
pf = &lengthCompare; // equivalent assignment: address-of operator is optional

bool b1 = pf("hello", "goodbye");    // calls lengthCompare
bool b2 = (*pf)("hello", "goodbye"); // equivalent call
bool b3 = lengthCompare("hello", "goodbye"); // equivalent call

// third parameter is a function type and is automatically treated as a pointer to function
void useBigger(const string &s1, const string &s2,
               bool pf(const string &, const string &));
// equivalent declaration: explicitly define the parameter as a pointer to function
void useBigger(const string &s1, const string &s2,
               bool (*pf)(const string &, const string &));

auto f1(int) -> int (*)(int*, int); // pointer type is required in return value type




