Strictly speaking, there are no multidimensional arrays in C++. What are commonly
referred to as multidimensional arrays are actually arrays of arrays.

int ia[3][4]; // array of size 3; each element is an array of ints of size 4
// array of size 10; each element is a 20-element array whose elements are arrays of 30
ints
int arr[10][20][30] = {0}; // initialize all elements to 0

int ia[3][4] = {    //
    {0, 1, 2, 3},   //
    {4, 5, 6, 7},   //
    {8, 9, 10, 11}  //
};

// equivalent initialization without the optional nested braces for each row
int ia[3][4] = {0,1,2,3,4,5,6,7,8,9,10,11};

// explicitly initialize only element 0 in each row
int ia[3][4] = {{ 0 }, { 4 }, { 8 }};

// assigns the first element of arr to the last element in the last row of ia
ia[2][3] = arr[0][0][0];
int (&row)[4] = ia[1]; // binds row to the second four-element array in ia

size_t cnt = 0;
for (auto &row : ia)        // for every element in the outer array
    for (auto &col : row) { // for every element in the inner array
        col = cnt;          // give this element the next value
        ++cnt;              // increment cnt
    }
    
for (auto row : ia)
    for (auto col : row) // illegal, row is int*
    
for (const auto &row : ia)  // correct, row is a reference to a int[4]
    for (auto col : row)    
        cout << col << endl;
        
To use a multidimensional array in a range for, the loop control variable for
all but the innermost array must be references.


