 Every variable is an object, including those that are members of other objects.
 Every object occupies at least one memory location.
 Variables of fundamental types such as int or char occupy exactly one memory
location, whatever their size, even if they’re adjacent or part of an array.
 Adjacent bit fields are part of the same memory location.

If two threads access separate memory locations,
there’s no problem: everything works fine.

On the other hand, if two threads access
the same memory location, then you have to be careful. If neither thread is updating
the memory location, you’re fine; read-only data doesn’t need protection or synchro-
nization.

If more than two threads access the same memory location, each pair of
accesses must have a defined ordering.

If there’s no enforced ordering between two accesses to a single memory location
from separate threads, one or both of those accesses is not atomic, and if one or both
is a write, then this is a data race and causes undefined behavior.

All threads must agree on the modification orders of each individual
object in a program, but they don’t necessarily have to agree on the relative order of oper-
ations on separate objects. See section 5.3.3 for more on the ordering of operations
between threads.


