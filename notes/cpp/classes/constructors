The default constructor is one that
takes no arguments.

The compiler generates a default constructor automatically only if a class
declares no constructors.

synthesized default
constructor:
* If there is an in-class initializer, use it to initialize the member.
* Otherwise, default-initialize the member.

Under the new standard, if we want the default behavior, we can ask the compiler
to generate the constructor for us by writing = default after the parameter list.

Constructor Initializer List
When a member is omitted from the constructor initializer list, it is implicitly initialized
using the same process as is used by the synthesized default constructor. In this case,
those members are initialized by the in-class initializers.

We must use the constructor initializer list to provide values for members that
are const, reference, or of a class type that does not have a default
constructor.

Members are initialized in the order in which they appear in the class definition

It is a good idea to write constructor initializers in the same order as the
members are declared. Moreover, when possible, avoid using members to
initialize other members.

A constructor that supplies default arguments for all its parameters also
defines the default constructor.

The new standard extends the use of constructor initializers to let us define so-called
delegating constructors.
Sales_data(std::string s): Sales_data(s, 0,0) {}

Use of default constructor:
Sales_data obj(); // oops! declares a function, not an object
Sales_data obj2;  // ok: obj2 is an object, not a function

A constructor that can be called with a single argument defines an implicit
conversion from the constructor’s parameter type to the class type.

explicit Sales_data(std::istream&); // force to use this constructor only explicitly

One context in which implicit conversions happen is when we use the copy form of
initialization

When a constructor is declared explicit, it can be used only with the
direct form of initialization (§ 3.2.1, p. 84). Moroever, the compiler will not
use this constructor in an automatic conversion.

A class is an aggregate if:
* All of its data members are public
* It does not define any constructors
* It has no in-class initializers
* It has no base classes or virtual functions

struct Data {
    int ival;
    string s;
};

We can initialize the data members of an aggregate class by providing a braced list of
member initializers:
Data val1 = { 0, "Anna" };

class may contain static members

The best way to ensure that the object is defined exactly once is to put the
definition of static data members in the same file that contains the
definitions of the class noninline member functions.

Static field may be of incomplete type
Static field may be used as default parameter
