A constant expression is an expression whose value cannot change and that can be
evaluated at compile time.

A literal is a constant expression.

A const object that is
initialized from a constant expression is also a constant expression.

const int max_files = 20;    // max_files is a constant expression
const int limit = max_files + 1; // limit is a constant expression
int staff_size = 27;       // staff_size is not a constant expression
const int sz = get_size(); // sz is not a constant expression

Under the new standard, we can ask the compiler to *verify* that a variable is a
constant expression by declaring the variable in a constexpr declaration.

Variables declared as constexpr are implicitly const and must be initialized by constant
expressions

The types we can
use in a constexpr are known as “literal types” because they are simple enough to
have literal values

the arithmetic, reference, and pointer types are
literal types.

the address of an object defined
outside of any function is a constant expression

A constexpr function is a function that can be used in a constant expression

A constexpr function is defined like any other function but must meet certain
restrictions: The return type and the type of each parameter in a must be a literal
type (§ 2.4.4, p. 66), and the function body must contain exactly one
statement (return statement)

In order to be able to expand the function immediately, constexpr
functions are implicitly inline

A constexpr function is not required to return a constant expression.


Literal classes:
Unlike other classes, classes that are
literal types may have function members that are constexpr.
These member functions are
implicitly const

An aggregate class (§ 7.5.5, p. 298) whose data members are all of literal type is a
literal class. A nonaggregate class, that meets the following restrictions, is also a literal
class:
 
• The data members all must have literal type.
 
• The class must have at least one constexpr constructor.
 
 
• If a data member has an in-class initializer, the initializer for a member of built-
in type must be a constant expression (§ 2.4.4, p. 65), or if the member has
class type, the initializer must use the member’s own constexpr constructor.
• The class must use default definition for its destructor, which is the member
that destroys objects of the class type (§ 7.1.5, p. 267).

constexpr ctor body is usually empty

class Debug {
public:
    constexpr Debug(bool b = true): hw(b), io(b), other(b) {
}
    constexpr Debug(bool h, bool i, bool o):
                                    hw(h), io(i), other(o) {
}
    constexpr bool any() { return hw || io || other; }
    void set_io(bool b) { io = b; }
    void set_hw(bool b) { hw = b; }
    void set_other(bool b) { hw = b; }
private:
    bool hw;    // hardware errors other than IO errors
    bool io;    // IO errors
    bool other; // other errors
};


