When we can’t (or don’t want to) use the
template version, we can define a specialized version of the class or function template.

A specialization is a separate
definition of the template in which one or more template parameters are specified to
have particular types.

template <typename T> int compare(const T&, const T&);

// special version of compare to handle pointers to character arrays
template <>
int compare(const char* const &p1, const char* const &p2)
{
    return strcmp(p1, p2);
}

Specializations instantiate a template; they do not overload it. As a result,
specializations do not affect function matching.

Templates and their specializations should be declared in the same
header file. Declarations for all the templates with a given name should
appear first, followed by any specializations of those templates.

when we specialize a
template, we must do so in the same namespace in which the original template is
defined.

template <>           // we're defining a specialization with
struct hash<Sales_data> // the template parameter of Sales_data
{
    // the type used to hash an unordered container must define these types
    typedef size_t result_type;
    typedef Sales_data argument_type; // by default, this type needs ==
    size_t operator()(const Sales_data& s) const;
    // our class uses synthesized copy control and default constructor
};

To enable users of A to use the specialization of hash for A, we
should define this specialization in the A header.


 
Differently from function templates, a class template specialization does not have to
supply an argument for every template parameter.


A class
template partial specialization is itself a template.

We can partially specialize only a class template. We cannot partially
specialize a function template.

template <class T> struct remove_reference {
    typedef T type;
};
// partial specializations that will be used for lvalue and rvalue references
template <class T> struct remove_reference<T&>  // lvalue references
    { typedef T type; };
template <class T> struct remove_reference<T&&> // rvalue references
    { typedef T type; };
    

Rather than specializing the whole template, we can specialize just specific member
function(s).

template <typename T> struct Foo {
    Foo(const T &t = T()): mem(t) { }
    void Bar() { /* ... */ }
    T mem;
    // other members of Foo
};
template<>           // we're specializing a template
void Foo<int>::Bar() // we're specializing the Bar member of Foo<int>
{
     // do whatever specialized processing that applies to ints
}
